# Description

Using Neo4j and popoto.js to display type's definition graph of Jahia

# How to

## Jahia

For this project, I generate a CSV file of definition directly with Jahia API.

 * Put the jsp "definition_csv.jsp" into the "resources" jahia's folder (not tools, due to the login/password ...)
 * Test it ! Go to http://localhost:8080/resources/definitions_csv.jsp
 
## Neo4j

In this part, we will create the graph database with the Jahia CSV file

 * Download Neo4j communty edition : http://neo4j.com/download/
 * Extract it to a folder (NEO4J_HOME)
 * Start it : NEO4J_HOME/bin/neo4 start
 * Run the neo4j shell : bin/neo4j-shell (Instead of the shell, you can use the neo4j browser : http://localhost:74747)
 * Execute bellow scripts
 
### Graph schema

```
// Create constraint for the graph
CREATE CONSTRAINT ON (t:Type) ASSERT t.name IS UNIQUE;
CREATE CONSTRAINT ON (m:Module) ASSERT m.name IS UNIQUE;
CREATE CONSTRAINT ON (ns:Namespace) ASSERT ns.uri IS UNIQUE;
```

### Graph main datas

```
USING PERIODIC COMMIT 1000
LOAD CSV WITH HEADERS FROM "http://localhost:8080/resources/definitions_csv.jsp" AS line FIELDTERMINATOR ';'

// create (if needed) the node type
MERGE (t:Type  {name: line.type})
SET t.description= line.description
SET t.mixin = line.mixin
SET t.abstract = line.abstract
SET t.properties = split(line.properties,"|")

// create the module node if needed and make the relation with the node type
MERGE (m:Module {name: line.module})
CREATE (t)-[:IS_DEFINED_IN]->(m)

// create the namespace node if needed and make the relation with the node type
MERGE (ns:Namespace {name: split(line.namespace, '@')[0], uri: split(line.namespace, '@')[1] })
CREATE (t)-[:HAS_NAMESPACE]->(ns)

// Create relation between current type and it's parent type node
FOREACH (supertype in split(line.supertype,"|") |
  MERGE (st:Type {name: supertype})
  CREATE (st)-[:IS_PARENT_OF]->(t)
);
```

### Adding some label

```
MATCH (t:Type { mixin:'true' }) SET  t :Mixin;
MATCH (t:Type { abstract:'true' }) SET  t :Abstract;
MATCH (t:Type) REMOVE t.mixin, t.abstract;

```

Great, now we have our graph !


### Some helpfull cypher query
 
#### Query on type
 
 * Properties of a node type (with the inheritance) : 
```
MATCH 
	(st:Type)-[*]->(t:Type) 
WHERE 
	t.name="nnt:article" AND 
	st.properties IS NOT NULL 
UNWIND 
	st.properties as property
WITH 
	DISTINCT property
RETURN 
	property
ORDER BY property ASC
```
 
 * Abstract type list : MATCH (t:Type:Abstract) RETURN t
 
 * Mixin type list : MATCH (t:Type:Mixin) RETURN t
 
 * Graph of type : 
```
MATCH (t:Type) 
OPTIONAL MATCH (st:Type)-[r:IS_PARENT_OF]->(t)
RETURN st, r, t
```

#### Query on namespace

 * All namespace created by a company : ```MATCH (n:Namespace) WHERE n.uri=~".*logisima.com.*" RETURN n```
 * All module that used a specific namespace : 
```
MATCH 
	(t:Type)-[:HAS_NAMESPACE]->(n:Namespace),
	(t)-[:IS_DEFINED_IN]->(m:Module)
WHERE
	n.uri =~ "*logisima.com.*"
RETURN DISTINCT m
```

 * Types of the namespace : 
 ```
MATCH 
	(t:Type)-[:HAS_NAMESPACE]->(n:Namespace)
WHERE
	n.uri =~ "*logisima.com.*"
RETURN DISTINCT t
 ```
 
#### Query on module

 * Mixin : 
```
MATCH (t:Type:Mixin)-[:IS_DEFINED_IN]->(m:Module)
WHERE m.name="system-jahia"
RETURN t
```

* Abstract : 
```
MATCH (t:Type:Abstract)-[:IS_DEFINED_IN]->(m:Module)
WHERE m.name="system-jahia"
RETURN t
```

* All type in a module
```
MATCH (t:Type)-[:IS_DEFINED_IN]->(m:Module)
WHERE m.name="system-jahia"
RETURN t
```

 * Namespaces :
```
MATCH 
  (t:Type)-[:IS_DEFINED_IN]->(m:Module),
  (t)-[:HAS_NAMESPACE]->(ns:Namespace)
WHERE m.name="system-jahia"
RETURN DISTINCT ns
```

 * Module dependencies : 
#### Miscellaneous

 * Delete all the graph  : ```MATCH (n),(m) OPTIONAL MATCH (n)-[r]->(m) DELETE n,r,m```